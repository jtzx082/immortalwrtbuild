name: ImmortalWrt Build and Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'  # UTC 1:00 (北京时间9:00)

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  BUILD_THREADS: 4

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    # 检出当前仓库（包含你的 .config 文件）
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 验证配置文件存在性
    - name: Check .config existence
      run: |
        if [ ! -f ".config" ]; then
          echo "❌ 致命错误：仓库根目录未找到 .config 文件！"
          exit 1
        fi
        echo "✅ 检测到有效的 .config 配置文件"

    # 准备编译环境
    - name: Setup build environment
      run: |
        # 添加 deadsnakes PPA 获取旧版 Python 工具
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        
        # 安装核心依赖
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3.10-distutils python3-dev rsync unzip zlib1g-dev file wget
    
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
        
    # 克隆官方源码
    - name: Clone ImmortalWrt
      run: |
        git clone --depth 1 $REPO_URL

    # 应用用户配置
    - name: Apply custom configuration
      run: |
        cp .config immortalwrt/
        cd immortalwrt
        echo "当前使用的配置文件哈希值："
        sha1sum .config

    # 更新软件源
    - name: Update feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    # 执行编译
    - name: Build firmware
      run: |
        cd immortalwrt
        make -j$BUILD_THREADS

    # 上传编译成果
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: immortalwrt/bin/targets/*/*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: firmware

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          firmware/*
        tag_name: nightly-$(date +'%Y%m%d')
        name: Nightly Build $(date +'%Y-%m-%d')
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
