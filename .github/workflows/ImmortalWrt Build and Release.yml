name: ImmortalWrt Build and Release

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 1 * * *'  # 每天 UTC 时间 1:00 (北京时间 9:00)

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  CONFIG_FILE: .config  # 你的配置文件路径
  BUILD_THREADS: 4      # 根据 GitHub Actions 配置调整

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 超时时间根据构建需求调整

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive  # 递归克隆子模块

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          immortalwrt/dl
          immortalwrt/build_dir
          ccache
        key: ${{ runner.os }}-immortalwrt-${{ hashFiles('.config') }}

    - name: Clone ImmortalWrt
      run: |
        git clone --depth 1 $REPO_URL
        cd immortalwrt
        if [ -f "../$CONFIG_FILE" ]; then
          cp ../$CONFIG_FILE .
        fi

    - name: Update feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Build firmware
      run: |
        cd immortalwrt
        make -j$BUILD_THREADS

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: immortalwrt/bin/targets/*/*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: firmware

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          firmware/*
        tag_name: nightly-$(date +'%Y%m%d')
        name: Nightly Build $(date +'%Y-%m-%d')
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
